<?php

function BootstrapSocial_block_configure($delta = '') {
  // The $delta parameter tells us which block is being configured.
  // In this bs, we'll allow the administrator to customize
  // the text of the 'configurable text string' block defined in this module.

  $form = array();
  if ($delta == 'bs_configurable_text') {
    // All we need to provide is the specific configuration options for our
    // block. Drupal will take care of the standard block configuration options
    // (block title, page visibility, etc.) and the save button.
    $form['BootstrapSocial_delicious_url_string'] = array(
        '#type' => 'textfield', 
        '#title' => t('The username to you delicious page'), 
        '#size' => 60, 
        '#description' => t('The url looks like this: http://delicious.com/{username}'), 
        '#default_value' => variable_get('BootstrapSocial_delicious_url_string',   t('username')),
    );
    $form['BootstrapSocial_deviant_url_string'] = array(
        '#type' => 'textfield', 
        '#title' => t('The username to you deviant art page'), 
        '#size' => 60, 
        '#description' => t('The url looks like this: http://{username}.deviantart.com'), 
        '#default_value' => variable_get('BootstrapSocial_deviant_url_string',   t('username')),
    );
    $form['BootstrapSocial_facebook_url_string'] = array(
        '#type' => 'textfield', 
        '#title' => t('The username to you facebook page'), 
        '#size' => 60, 
        '#description' => t('The url looks like this: http://facebook.com/{username}'), 
        '#default_value' => variable_get('BootstrapSocial_facebook_url_string',   t('username')),
    );
    $form['BootstrapSocial_twitter_url_string'] = array(
      '#type' => 'textfield', 
      '#title' => t('The username to you twitter page'), 
      '#size' => 60, 
      '#description' => t('The url looks like this: http://twitter.com/{username}'), 
      '#default_value' => variable_get('BootstrapSocial_twitter_url_string',   t('username')),
    );
  }
  return $form;
}

function BootstrapSocial_block_info() {
  // This hook returns an array, each component of which is an array of block
  // information. The array keys are the 'delta' values used in other block
  // hooks.

  // The required block information is a block description, which is shown
  // to the site administrator in the list of possible blocks. You can also
  // provide initial settings for block weight, status, etc.

  // Many options are defined in hook_block_info():
  $blocks['bs_configurable_text'] = array(
    // info: The name of the block.
    'info' => t('bs: configurable text string'),
    // Block caching options (per role, per user, etc.) 
    'cache' => DRUPAL_CACHE_PER_ROLE, // default
  );

  // This sample shows how to provide default settings. In this case we'll
  // enable the block in the first sidebar and make it visible only on
  // 'node/*' pages. See the hook_block_info() documentation for these.
  $blocks['bs_empty'] = array(
    'info' => t('bs: empty block'), 
    'status' => TRUE, 
    'region' => 'sidebar_first', // Not usually provided. 
    'visibility' => BLOCK_VISIBILITY_LISTED, // Not usually provided. 
    'pages' => 'node/*', // Not usually provided here.
  );

  $blocks['bs_uppercase'] = array(
    // info: The name of the block.
    'info' => t('bs: uppercase this please'), 
    'status' => TRUE, 
    'region' => 'sidebar_first', // Not usually provided.
  );

  return $blocks;
}

function BootstrapSocial_block_list_alter(&$blocks) {
  // We are going to make the search block sticky on bottom of regions. For
  // this bs, we will modify the block list and append the search block at
  // the end of the list, so even if the administrator configures the block to
  // be on the top of the region, it will demote to bottom again.
  foreach ($blocks as $bid => $block) {
    if (($block->module == 'search') && ($block->delta == 'form')) {
      // Remove the block from the list and append to the end.
      unset($blocks[$bid]);
      $blocks[$bid] = $block;
      break;
    }
  }
}

function BootstrapSocial_block_save($delta = '', $edit = array()) {
  // We need to save settings from the configuration form.
  // We need to check $delta to make sure we are saving the right block.
  if ($delta == 'bs_configurable_text') {
    // Have Drupal save the string to the database.
    variable_set('BootstrapSocial_delicious_url_string', $edit['BootstrapSocial_delicious_url_string']);
    variable_set('BootstrapSocial_deviant_url_string', $edit['BootstrapSocial_deviant_url_string']);
    variable_set('BootstrapSocial_facebook_url_string', $edit['BootstrapSocial_facebook_url_string']);
    variable_set('BootstrapSocial_twitter_url_string', $edit['BootstrapSocial_twitter_url_string']);
  }
  return;
}

function BootstrapSocial_block_view($delta = '') {
  drupal_add_css(drupal_get_path('module', 'BootstrapSocial') . '/css/BootstrapSocial.css');
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'bs_configurable_text':
      // The subject is displayed at the top of the block. Note that it
      // should be passed through t() for translation. The title configured
      // for the block using Drupal UI supercedes this one.
      $block['subject'] = t('Follow me');
      // The content of the block is typically generated by calling a custom
      // function.
      $block['content'] = BootstrapSocial_contents($delta);
      break;
    case 'bs_empty':
      $block['subject'] = t('Title of second block (bs_empty)');
      $block['content'] = BootstrapSocial_contents($delta);
      break;
    case 'bs_uppercase':
      $block['subject'] = t("uppercase this please");
      $block['content'] = t("This block's title will be changed to uppercase. Any other block with 'uppercase' in the subject or title will also be altered. If you change this block's title through the UI to omit the word 'uppercase', it will still be altered to uppercase as the subject key has not been changed.");
      break;
  }
  return $block;
}

function BootstrapSocial_block_view_alter(&$data, $block) {
  // We'll search for the string 'uppercase'.
  if ((!empty($block->title) && stristr($block->title, 'uppercase')) || (!empty($data['subject']) && stristr($data['subject'], 'uppercase'))) {
    // This will uppercase the default title.
    $data['subject'] = isset($data['subject']) ? drupal_strtoupper($data['subject']) : '';
    // This will uppercase a title set in the UI.
    $block->title = isset($block->title) ? drupal_strtoupper($block->title) : '';
  }
}

function BootstrapSocial_contents($which_block) {
  switch ($which_block) {
    case 'bs_configurable_text':
      // Modules would typically perform some database queries to fetch the
      // content for their blocks. Here, we'll just use the variable set in the
      // block configuration or, if none has set, a default value.
      // Block content can be returned in two formats: renderable arrays
      // (as here) are preferred though a simple string will work as well.
      // Block content created through the UI defaults to a string.
      $delicious = variable_get('BootstrapSocial_delicious_url_string',   t('username'));
      $deviant = variable_get('BootstrapSocial_deviant_url_string',   t('username'));
      $facebook = variable_get('BootstrapSocial_facebook_url_string',   t('username'));
      $twitter = variable_get('BootstrapSocial_twitter_url_string',   t('username'));
      $urls = '<ul id="BootstrapSocialList">';
                if($delicious != 'username'){
                  $urls .= '<li id="BSDelicious"><a href="http://delicious.com/'.$delicious.'" target="_blank"><span>Me on Delicious</span></a></li>';
                }
                if($deviant != 'username'){
                  $urls .= '<li id="BSDeviant"><a href="http://'.$deviant.'.deviantart.com" target="_blank"><span>Me on Deviant Art</span></a></li>';
                }
                if($facebook != 'username'){
                  $urls .= '<li id="BSFacebook"><a href="http://facebook.com/'.$facebook.'" target="_blank"><span>Me on Facebook</span></a></li>';
                }
                if($twitter != 'username'){
                  $urls .= '<li id="BSTwitter"><a href="http://twitter.com/'.$twitter.'" target="_blank"><span>Me on Twitter</span></a></li>';
                }
      $urls .= '</ul>';
      return array('#markup' => $urls);
    case 'bs_empty':
      // It is possible that a block not have any content, since it is
      // probably dynamically constructed. In this case, Drupal will not display
      // the block at all. This block will not be displayed.
      return;
  }
}

function BootstrapSocial_menu() {
  $items['bs/BootstrapSocial'] = array(
    'page callback' => 'BootstrapSocial_page', 
    'access callback' => TRUE, 
    'title' => 'Block bs',
  );
  return $items;
}

function BootstrapSocial_page() {
  $page = array(
    '#type' => 'markup', 
    '#markup' => t('The Block bs provides two sample blocks which demonstrate the various block APIs. To experiment with the blocks, enable and configure them on <a href="@url">the block admin page</a>.', array('@url' => url('admin/structure/block'))),
  );
  return $page;
}